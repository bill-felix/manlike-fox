alpha = .1, position = position_jitter(width = .2))
base <- qplot(scale(dat[dat$zip == "45223", "price"]), geom = "density")
base + stat_function(fun = dnorm, colour = "red",
arg = list(mean = 0)) # Northside's Distribution Curve vs. Normal
ggplot(dat, aes(y = price, x = zip, fill = provider)) + geom_boxplot()
View(fhy)
a_dat <- dat
a_dat %<>%
group_by(zip) %>%
summarise(count = n(),
avg = mean(price),
high = max(price),
low = min(price),
sd = sd(price))
View(a_dat)
a_dat %<>% dat %>%
group_by(zip) %>%
summarise(count = n(),
avg = mean(price),
high = max(price),
low = min(price),
sd = sd(price))
a_dat <- dat %>%
group_by(zip) %>%
summarise(count = n(),
avg = mean(price),
high = max(price),
low = min(price),
sd = sd(price))
a_dat <- dat %>%
group_by(zip) %>%
summarise(count = n(),
avg = mean(price),
high = max(price),
low = min(price),
sd = sd(price),
diff_h_to_l = max(price) - min(price))
b_dat <- dat %>%
group_by(provider) %>%
summarise(count = n(),
high = max(price),
low = min(price),
sd = sd(price),
diff_h_to_l = max(price) - min(price))
View(a_dat)
View(b_dat)
opulate_hype_data <- function(x,n) {
x <- data.frame(sess_id = sample(50000000:99999999, n),
#                   long = rnorm(n, mean = 84.5352946, sd = .005),
#                   lat = rnorm(n, mean = 39.1651805, sd = .005),
zip = sample(zips, n, replace =T),
timestamp = rdate(n, "2014/01/01", "2015/12/31"),
serv = sample(services, n, replace =T, prob = c(.4, .4, .3)),
provider = sample(providers, n, replace =T, prob = c(.55, .35, .1)),
price = rnorm(n, mean = 75, sd = 10))
}
set.seed(6)
dat <- NULL
providers <- c("Time Warner Cable", "Cincinnati Bell", "Comcast")
services <- c("Cable/Internet","Cable", "Internet")
zips <- c("45223", "45202", "45206", "45201", "45239",
"45205", "45207", "45225", "45217", "45213",
"45214", "45216")
general_price <- round(runif(1000, min = 40, max = 160), 2)
dat <- populate_hype_data(dat,50000)
a_dat <- dat %>%
group_by(zip) %>%
summarise(count = n(),
avg = mean(price),
high = max(price),
low = min(price),
sd = sd(price),
diff_h_to_l = max(price) - min(price))
b_dat <- dat %>%
group_by(provider) %>%
summarise(count = n(),
high = max(price),
low = min(price),
sd = sd(price),
diff_h_to_l = max(price) - min(price))
View(a_dat)
# artificially discount or raise providers
set.seed(80)
artificial <- rnorm(500, mean = 1, sd = .035)
counter <- 40
repeat {
dat %<>%
mutate(price = ifelse(zip == sample(zips, 1) |
provider == sample(providers, 1) |
serv == sample(services, 1),
price * sample(artificial, 1), price * 1))
counter <- counter - 1
if(counter < 0)
break;
}
# submit function simulates the submit button and returns results
dat <- submit(dat)
# lubridate functions for extraction
dat$year <- year(dat$timestamp)
dat$quarter <- quarter(dat$timestamp)
dat$month <- month(dat$timestamp)
dat$day <- day(dat$timestamp)
###### comparisons ######
a_dat <- dat %>%
group_by(zip) %>%
summarise(count = n(),
avg = mean(price),
high = max(price),
low = min(price),
sd = sd(price),
diff_h_to_l = max(price) - min(price))
b_dat <- dat %>%
group_by(provider) %>%
summarise(count = n(),
high = max(price),
low = min(price),
sd = sd(price),
diff_h_to_l = max(price) - min(price))
View(a_dat)
## # # # # ###
##   wrangle##
## hype_data##
## # # # # ###
library(plyr)
library(dplyr)
library(magrittr)
library(stringr)
library(lubridate)
library(ggplot2)
options(max.print = 250) ## limit printed results
# import data (hype for now)
rdate <- function(n, start, end) { ## start/end format = "yyyy/mm/dd"
st <- as.POSIXct(as.Date(start))
et <- as.POSIXct(as.Date(end))
dt <- as.numeric(difftime(et,st,unit="sec")) ## calculates difftime
ev <- runif(n, min = 1.1, max = dt)
rt <- st + ev ## adds difftime to start
}
submit <- function(h) {
h <- arrange(h, timestamp) ## order observations by date
h <- ddply(h, .(provider, zip, serv), function(x) {
x$lowest <- cummin(x$price);
return(x)}) ## calculate lowest price to date
h <- ddply(h, .(provider, zip, serv), function(x) {
x$average <- round(cumsum(x$price)/seq_along(x$price), 2);
return(x)}) ## calculate avg price to date
## h <- ddply(h, .(provider,zip), function(x) {x$avg_price <- rollmean(x$price, 10, na.pad=TRUE, align = "right"); return(x)}) ## rolling avg by last 10 obvs
h <- ddply(h, .(provider, zip, serv), function(x) {
x$highest <- cummax(x$price);
return(x)}) ## calculate highest price to date
h %<>%
mutate(thmbdown = ifelse(h$average < h$price, 1, 0))
}
populate_hype_data <- function(x,n) {
x <- data.frame(sess_id = sample(50000000:99999999, n),
#                   long = rnorm(n, mean = 84.5352946, sd = .005),
#                   lat = rnorm(n, mean = 39.1651805, sd = .005),
zip = sample(zips, n, replace =T),
timestamp = rdate(n, "2014/01/01", "2015/12/31"),
serv = sample(services, n, replace =T, prob = c(.4, .4, .3)),
provider = sample(providers, n, replace =T, prob = c(.55, .35, .1)),
price = rnorm(n, mean = 75, sd = 10))
}
set.seed(6)
dat <- NULL
providers <- c("Time Warner Cable", "Cincinnati Bell", "Comcast")
services <- c("Cable/Internet","Cable", "Internet")
zips <- c("45223", "45202", "45206", "45201", "45239",
"45205", "45207", "45225", "45217", "45213",
"45214", "45216")
general_price <- round(runif(1000, min = 40, max = 160), 2)
dat <- populate_hype_data(dat,50000)
# artificially discount or raise providers
set.seed(80)
artificial <- rnorm(500, mean = 1, sd = .035)
counter <- 40
repeat {
dat %<>%
mutate(price = ifelse(zip == sample(zips, 1) |
provider == sample(providers, 1) |
serv == sample(services, 1),
price * sample(artificial, 1), price * 1))
counter <- counter - 1
if(counter < 0)
break;
}
# submit function simulates the submit button and returns results
dat <- submit(dat)
# lubridate functions for extraction
dat$year <- year(dat$timestamp)
dat$quarter <- quarter(dat$timestamp)
dat$month <- month(dat$timestamp)
dat$day <- day(dat$timestamp)
###### comparisons ######
a_dat <- dat %>%
group_by(zip) %>%
summarise(count = n(),
avg = mean(price),
high = max(price),
low = min(price),
sd = sd(price),
diff_h_to_l = max(price) - min(price))
b_dat <- dat %>%
group_by(provider) %>%
summarise(count = n(),
high = max(price),
low = min(price),
sd = sd(price),
diff_h_to_l = max(price) - min(price))
View(a_dat)
View(b_dat)
ggplot(dat, aes(x=timestamp, y=average, color = zip)) + geom_point()
ggplot(dat, aes(x=timestamp, y=average, color = provider)) + geom_point()
ggplot(dat, aes(x=month, y=average, color = zip)) + geom_point()
ggplot(dat, aes(x=month, y=average, color = zip)) + geom_line()
ggplot(dat, aes(x=month, y=max(average), color = zip)) + geom_line()
d_dat <- dat %>%
group_by(day) %>%
summarise (count = n(),
day_high = max(price),
day_avg = mean(price),
day_low = min(price),
day_sd = sd(price))
View(d_dat)
d_dat <- dat %>%
group_by(month, day) %>%
summarise (count = n(),
day_high = max(price),
day_avg = mean(price),
day_low = min(price),
day_sd = sd(price))
View(d_dat)
ggplot(d_dat, aes(x = day, y = day_avg, color =zip) + geom_point()
ggplot(d_dat, aes(x = day, y = day_avg, color =zip)) + geom_point()
ggplot(d_dat, aes(x =  month,day, y = day_avg, color =zip)) + geom_point()
ggplot(d_dat, aes(x = c(month,day), y = day_avg, color =zip)) + geom_point()
d_dat <- dat %>%
group_by(month, day) %>%
summarise (count = n(),
mn_day = paste(month,day)
day_high = max(price),
day_avg = mean(price),
day_low = min(price),
day_sd = sd(price))
ggplot(d_dat, aes(x = month, y = day_avg, color =zip)) + geom_point()
qplot(d_dat) + geom_point()
qplot(d_dat)
View(d_dat)
ggplot(dat, aes(x=seq(dat$month), y = day_avg, color = zip)) + geom_point()
ggplot(d_dat, aes(x=seq(dat$month), y = day_avg, color = zip)) + geom_point()
ggplot(d_dat, aes(x=nrow(dat$month), y = day_avg, color = zip)) + geom_point()
ggplot(d_dat, aes(x=nrow(d_dat, y = day_avg, color = zip)) + geom_point()
ggplot(d_dat, aes(x=nrow(d_dat), y = day_avg, color = zip)) + geom_point()
ggplot(d_dat, aes(x = day_avg, color = zip)) + geom_point()
ggplot(d_dat, aes(x = day_avg, color = zip)) + geom_histogram()
View(d_dat)
ggplot(d_dat, aes(x = seq(day_avg), y = day_avg, color = zip)) + geom_point()
autoplot(d_dat)
d_dat <- dat %>%
group_by(month, day) %>%
summarise (count = n(),
day_high = max(price),
day_avg = mean(price),
day_low = min(price),
day_sd = sd(price)) %>%
qplot()
d_dat <- dat %>%
group_by(month, day) %>%
summarise (count = n(),
day_high = max(price),
day_avg = mean(price),
day_low = min(price),
day_sd = sd(price))
str(d_dat)
d_dat <- dat %>%
group_by(month, day) %>%
summarise (count = n(),
mn_day = factor(rownames(d_dat)),
day_high = max(price),
day_avg = mean(price),
day_low = min(price),
day_sd = sd(price))
d_dat <- dat %>%
group_by(month, day) %>%
mutate(mn_day = factor(rownames(d_dat))) %>%
summarise (count = n(),
day_high = max(price),
day_avg = mean(price),
day_low = min(price),
day_sd = sd(price))
d_dat <- dat %>%
group_by(month, day) %>%
mutate(mn_day = rownames(d_dat)) %>%
summarise (count = n(),
day_high = max(price),
day_avg = mean(price),
day_low = min(price),
day_sd = sd(price))
d_dat <- dat %>%
group_by(month, day) %>%
mutate(mn_day = 1:365) %>%
summarise (count = n(),
day_high = max(price),
day_avg = mean(price),
day_low = min(price),
day_sd = sd(price))
str(d_dat)
d_dat %<>% mutate(mn_day = seq_along(d_dat$month))
View(d_dat)
d_dat %<>% mutate(mn_day = month*100 + day*10)
View(d_dat)
d_dat %<>% mutate(mn_day = month*1000 + day*1)
View(d_dat)
d_dat %<>% mutate(mn_day = month*100 + day*1)
View(d_dat)
ggplot(d_dat, aes(x = mn_day, y = day_avg, color = zip)) + geom_point()
d_dat %<>% mutate(mn_day = as.numeric(month*100 + day*1)
d_dat %<>% mutate(mn_day = as.numeric(month*100 + day*1))
ggplot(d_dat, aes(x = mn_day, y = day_avg, color = zip)) + geom_point()
d_dat %<>% mutate(mn_day = md(d_dat$month, d_dat$day))
d_dat <- dat %>%
group_by(year, month, day) %>%
summarise (count = n(),
day_high = max(price),
day_avg = mean(price),
day_low = min(price),
day_sd = sd(price))
d_dat %<>% mutate(mn_day = ymd(paste(d_dat$year, d_dat$month, d_dat$day)))
d_dat %<>% mutate(mn_day = 1:365)
d_dat <- zoo(d_dat)
library(zoo)
library(zoo)
install.packages("zoo")
d_dat <- zoo(d_dat)
d_dat <- as.zoo(d_dat)
library(zoo)
d_dat <- zoo(d_dat)
ggplot(d_dat, aes(x = mn_day, y = day_avg, color = zip)) + geom_point()
ggplot(d_dat)
qplot(d_dat)
d_dat
d_dat <- dat %>%
group_by(year, month, day) %>%
summarise (count = n(),
day_high = max(price),
day_avg = mean(price),
day_low = min(price),
day_sd = sd(price))
d_dat <- as.ts(d_dat)
qplot(d_dat)
d_dat
qplot(d_dat, aes(x = Start:End, y = day_avg))
qplot(d_dat, aes(x = time, y = day_avg))
ggplot(d_dat, aes(x = time, y = day_avg))
d_dat <- dat %>%
group_by(year, month, day) %>%
summarise (count = n(),
day_high = max(price),
day_avg = mean(price),
day_low = min(price),
day_sd = sd(price))
d_dat <- zoo(d_dat)
str(d_dat)
autoplot(d_dat)
autoplot(d_dat[,5:8])
setwd("~/GitHub/manlike-fox/shinyapp")
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinyapps)
shinyapps::deployApp('~/GitHub/r/data/bls_ce/shinyapp')
library(shinyapps)
shinyapps::deployApp('~/GitHub/manlike-fox/shinyapp')
library(shinyapps)
shinyapps::deployApp('~/GitHub/manlike-fox/shinyapp')
shinyapps::deployApp('~/GitHub/manlike-fox/shinyapp')
shinyapps::deployApp('~/GitHub/manlike-fox/shinyapp')
# shiny demonstration #
library(stringr)
library(plyr)
library(magrittr)
library(dplyr)
library(ggplot2)
library(tidyr)
# setwd("~/GitHub/r/data/bls_ce")
options(max.print = 100)
values <- read.table("cx.data.1.AllData.txt", header =T, sep ="\t")
series <- read.table("cx.series.txt", header =T, sep ="\t")
demo <- read.table("cx.demographics.txt", header =T, sep ="\t", stringsAsFactors =F, row.names =NULL)
demo <- demo[,1:2]
colnames(demo) <- c("demo_code", "demo_text")
char <- read.table("cx.characteristics.txt", header =T, sep ="\t", row.names =NULL)
char <- char[,1:3]
colnames(char) <- c("demo_code", "char_code", "char_text")
dat <- merge(values, series, by = "series_id", all.x =T)
# shiny demonstration #
library(stringr)
library(plyr)
library(magrittr)
library(dplyr)
library(ggplot2)
library(tidyr)
setwd("~/GitHub/r/data/bls_ce")
options(max.print = 100)
values <- read.table("cx.data.1.AllData.txt", header =T, sep ="\t")
series <- read.table("cx.series.txt", header =T, sep ="\t")
demo <- read.table("cx.demographics.txt", header =T, sep ="\t", stringsAsFactors =F, row.names =NULL)
demo <- demo[,1:2]
colnames(demo) <- c("demo_code", "demo_text")
char <- read.table("cx.characteristics.txt", header =T, sep ="\t", row.names =NULL)
char <- char[,1:3]
colnames(char) <- c("demo_code", "char_code", "char_text")
dat <- merge(values, series, by = "series_id", all.x =T)
View(dat)
wide_data <- dat %>%
group_by(series_title, year) %>%
summarise(mean = mean(value)) %>%
separate(series_title, into = c("category", "demo_code", "char_text"), sep ="-", remove =T, extra ="merge")
View(wide_data)
View(wide_data)
table(dat$char_text)
table(wide_dat$char_text)
table(wide_data$char_text)
View(wide_data)
str(wide_data)
unique(wide_data$char_text)
x <- unique(wide_data$char_text)
str_detect(x, "Northeast")
x[str_detect(x, "Northeast")]
getwd()
write.csv(wide_data, "wide_data.csv", row.names =F)
wide_data <- dat %>%
group_by(series_title, year) %>%
summarise(mean = mean(value)) %>%
separate(series_title, into = c("category", "demo_code", "char_text")
, sep ="-", remove =T, extra ="merge") %>%
filter(char_text == str_detect(wide_data$char_text, "Region of residence"))
wide_data <- dat %>%
group_by(series_title, year) %>%
summarise(mean = mean(value)) %>%
separate(series_title, into = c("category", "demo_code", "char_text")
, sep ="-", remove =T, extra ="merge") %>%
filter(str_detect(wide_data$char_text, "Region of residence"))
wide_data <- dat %>%
group_by(series_title, year) %>%
summarise(mean = mean(value)) %>%
separate(series_title, into = c("category", "demo_code", "char_text")
, sep ="-", remove =T, extra ="merge") %>%
filter(str_detect(char_text, "Region of residence"))
View(wide_data)
wide_data <- dat %>%
group_by(series_title, year) %>%
summarise(mean = mean(value)) %>%
filter(str_detect(series_title, "Region of residence"))
View(wide_data)
View(dat)
write.csv(dat, "dat.csv", row.names =T)
table(dat$characteristics_code)
table(demographics_code)
table(dat$demographics_code)
tall_data <- dat %>%
filter(demographics_code == "LB11") %>%
group_by(series_title, year) %>%
summarise(mean = mean(value))
View(tall_data)
tall_data <- separate(series_title, into = c("category", "demo_code", "char_text"), sep ="-", remove =T, extra ="merge")
tall_data <- separate(tall_data, series_title, into = c("category", "demo_code", "char_text"), sep ="-", remove =T, extra ="merge")
View(tall_data)
setwd("~/GitHub/manlike-fox/shinyapp")
write.csv(tall_data, "tall.csv", row.names =F)
table(tall_data$char_text)
tall_data <- filter(char_text == "Region of residence: midwest" | char_text == "Region of residence: northeast" |
char_text == "Region of residence: south" | char_text == "Region of residence: west")
tall_data <- filter(tall_data, char_text == "Region of residence: midwest" | char_text == "Region of residence: northeast" |
char_text == "Region of residence: south" | char_text == "Region of residence: west")
View(tall_data)
setwd("~/GitHub/manlike-fox/shinyapp")
write.csv(tall_data, "tall.csv", row.names =F)
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
